# -*- coding: utf-8 -*-
"""Student-Marks-XGB-regressor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KvGhgs0WO2fdE5jvqBi0RDmzpa_GP5uf

##Importing Necessary Libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

"""##Loading the dataset"""

data = pd.read_csv('Student_Marks.csv')

"""##Glimpse fo the data loaded"""

data.head()

"""##Checking the number of rows and columns in the dataset"""

data.shape

data.describe()

data.info()

"""##Checking for the null/missing values in the dataset"""

df.select_dtypes(include=['object', 'category']).columnsdata.isnull().sum()

"""###To identify categorical variables, we can examine the data types of each column in the DataFrame. Columns with data type object or category are likely categorical variables."""

data.select_dtypes(include=['object', 'category']).columns

"""###Initiating the gradient boosting regressor model"""

import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV, KFold
from sklearn.metrics import mean_squared_error
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingRegressor

X = data.drop('Marks', axis=1)
y = data['Marks']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## Defining the preprocessing steps"""

numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())])

model = Pipeline(steps=[
    ('preprocessor', numeric_transformer),
    ('regressor', GradientBoostingRegressor())])

"""## Defining the cross-validation strategy"""

kf = KFold(n_splits=5, shuffle=True, random_state=42)

"""### Defining the hyper-parameter grid"""

param_grid = {
    'regressor__learning_rate': [0.01, 0.1, 0.2],
    'regressor__n_estimators': [50, 100, 200],
    'regressor__max_depth': [3, 5, 7],
    'regressor__min_samples_split': [2, 5, 10],
    'regressor__min_samples_leaf': [1, 2, 4]
}

"""### Performing hyper-parameter tuning using GridSearchCV"""

grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=kf, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search.fit(X_train, y_train)

"""### Getting the best hyper-parameters"""

best_params = grid_search.best_params_
print("Best Hyper-parameters:")
print(best_params)

"""#### Getting the best model"""

best_model = grid_search.best_estimator_

"""### Evaluating the best model"""

y_pred = best_model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

"""##Initiating the XGBoost regressor model"""

import xgboost as xgb

best_params = {
    'learning_rate': 0.1,
    'max_depth': 5,
    'min_child_weight': 1,
    'subsample': 0.7,
    'colsample_bytree': 0.7,
    'n_estimators': 100
}

# Initialize XGBoost regressor with the tuned hyper-parameters
xg_reg = xgb.XGBRegressor(objective ='reg:squarederror',
                           learning_rate = best_params['learning_rate'],
                           max_depth = best_params['max_depth'],
                           min_child_weight = best_params['min_child_weight'],
                           subsample = best_params['subsample'],
                           colsample_bytree = best_params['colsample_bytree'],
                           n_estimators = best_params['n_estimators'])

import numpy as np
from sklearn.metrics import mean_absolute_error, mean_squared_error

"""### Fitting the model to the training data"""

xg_reg.fit(X_train, y_train)

"""### Predicting on the test set"""

y_pred = xg_reg.predict(X_test)

"""### Calculating evaluation metrics"""

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)

"""## Visualizing actual vs. predicted values"""

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', label='Actual vs. Predicted')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=4, label='Perfect Prediction')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs. Predicted Values')
plt.legend()
plt.show()